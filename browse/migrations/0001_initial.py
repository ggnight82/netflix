# Generated by Django 3.1.7 on 2021-03-09 15:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor_name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='contents',
            fields=[
                ('contents_id', models.BigAutoField(help_text='CONTENTS ID', primary_key=True, serialize=False)),
                ('contents_title', models.CharField(max_length=50)),
                ('contents_description', models.TextField()),
                ('contents_created_at', models.DateTimeField(auto_now_add=True)),
                ('contents_updated_at', models.DateTimeField(auto_now=True)),
                ('contents_actor', models.ManyToManyField(to='browse.actor')),
            ],
        ),
        migrations.CreateModel(
            name='genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_genre', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='video',
            fields=[
                ('video_season', models.IntegerField(default=0)),
                ('video_episode', models.IntegerField(default=0)),
                ('video_id', models.BigAutoField(help_text='VIDEO ID', primary_key=True, serialize=False)),
                ('video_file', models.FileField(null=True, upload_to='../MEDIA')),
                ('contents_id', models.ForeignKey(db_column='post_id', on_delete=django.db.models.deletion.CASCADE, related_name='content', to='browse.contents')),
            ],
        ),
        migrations.AddField(
            model_name='contents',
            name='contents_genre',
            field=models.ManyToManyField(to='browse.genre'),
        ),
    ]
